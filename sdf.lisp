(in-package #:org.shirakumo.raster)

(deftype sdf ()
  '(function (single-float single-float) single-float))

(defun rectangle (x y w h)
  (let ((x (coordinate x)) (y (coordinate y))
        (w (coordinate w)) (h (coordinate h)))
    (lambda (nx ny)
      (declare (type coordinate nx ny))
      (let ((dx (- (abs (- nx x)) w))
            (dy (- (abs (- ny y)) h)))
        (+ (min 0f0 (max dx dy))
           (sqrt (+ (expt (max dx 0f0) 2)
                    (expt (max dy 0f0) 2))))))))

(defun ellipse (x y w h)
  (let ((x (coordinate x)) (y (coordinate y))
        (w (/ 2f0 (coordinate w))) (h (/ 2f0 (coordinate h))))
    (lambda (nx ny)
      (declare (type coordinate nx ny))
      (sqrt (+ (expt (* (- nx x) w) 2)
               (expt (* (- ny y) h) 2))))))

(defun subtract (a b)
  (declare (type sdf a b))
  (lambda (x y)
    (declare (type coordinate x y))
    (max (funcall a x y)
         (- (funcall b x y)))))

(defun combine (a b)
  (declare (type sdf a b))
  (lambda (x y)
    (declare (type coordinate x y))
    (min (funcall a x y)
         (funcall b x y))))

(defun intersect (a b)
  (declare (type sdf a b))
  (lambda (x y)
    (declare (type coordinate x y))
    (let ((a (funcall a x y))
          (b (funcall b x y)))
      (max (min a b) (- (max a b))))))

(defun translate (sdf x y)
  (declare (type sdf sdf))
  (let ((x (coordinate x))
        (y (coordinate y)))
    (lambda (nx ny)
      (declare (type coordinate nx ny))
      (funcall sdf (- nx x) (- ny y)))))

(defun scale (sdf x y)
  (declare (type sdf sdf))
  (let ((x (coordinate x))
        (y (coordinate y)))
    (lambda (nx ny)
      (declare (type coordinate nx ny))
      (funcall sdf (* nx x) (* ny y)))))

(defun rotate (sdf angle)
  (declare (type sdf sdf))
  (let ((cos (cos (coordinate angle)))
        (sin (sin (coordinate angle))))
    (lambda (nx ny)
      (declare (type coordinate nx ny))
      (funcall sdf
               (+ (* nx cos) (* ny sin))
               (+ (* nx (- sin)) (* ny cos))))))

(defun skew (sdf x y)
  (declare (type sdf sdf))
  (let ((x (tan (coordinate x)))
        (y (tan (coordinate y))))
    (lambda (nx ny)
      (declare (type coordinate nx ny))
      (funcall sdf (+ nx (round (* ny y))) (+ ny (round (* nx x)))))))

(defun transform (sdf mat)
  (declare (type sdf sdf))
  (declare (type (simple-array single-float (6)) mat))
  (lambda (nx ny)
    (declare (type coordinate nx ny))
    (funcall sdf
             (round (+ (* (aref mat 0) nx) (* (aref mat 1) ny) (aref mat 2)))
             (round (+ (* (aref mat 3) nx) (* (aref mat 4) ny) (aref mat 5) )))))
